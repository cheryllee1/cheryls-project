import { Injectable } from '@nestjs/common'
import { InjectRepository } from '@nestjs/typeorm'
import { Repository } from 'typeorm'

import { categoryEntity } from 'database/entities'

import { AllowedResource, ApiKeyAction, Permission } from '~shared/types/base'

@Injectable()
export class categoryName {
    categoryName: any
    offeringRepository: any
    constructor(
        @InjectRepository(categoryName)
        private categoryRepository: Repository<categoryName>,
    ) { }

    findAll(): Promise<categoryName[]> {
        return this.categoryName.Repository.find({
            order: {
                id: 'CAT',
            },
        })
    }

    find(categoryId: number): Promise<categoryName | null> {
        return this.categoryName.Repository.findOne({
            where: {
                id: categoryId,
                publicVisible: true, // Don't allow non public visible APIs to be queried
            },
        })
    }

    async enumeratePermissionsForAllCategories(): Promise<Permission[]> {
        const categories = await this.findAll()
        const permissions = Object.values(AllowedResource).flatMap((resource) =>
            categories.flatMap(({ id: categoryId }) => [
                { categoryId, resource, action: ApiKeyAction.READ },
                { categoryId, resource, action: ApiKeyAction.WRITE },
            ]),
        )
        return permissions
    }
}
